// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc2
// source: pkg/proto/manga_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MangaService_AddManga_FullMethodName               = "/proto.MangaService/AddManga"
	MangaService_EditManga_FullMethodName              = "/proto.MangaService/EditManga"
	MangaService_ListMangas_FullMethodName             = "/proto.MangaService/ListMangas"
	MangaService_CheckMangaAvailability_FullMethodName = "/proto.MangaService/CheckMangaAvailability"
)

// MangaServiceClient is the client API for MangaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MangaServiceClient interface {
	AddManga(ctx context.Context, in *AddMangaRequest, opts ...grpc.CallOption) (*AddMangaResponse, error)
	EditManga(ctx context.Context, in *EditMangaRequest, opts ...grpc.CallOption) (*EditMangaResponse, error)
	ListMangas(ctx context.Context, in *ListMangasRequest, opts ...grpc.CallOption) (*ListMangasResponse, error)
	CheckMangaAvailability(ctx context.Context, in *CheckMangaAvailabilityRequest, opts ...grpc.CallOption) (*CheckMangaAvailabilityResponse, error)
}

type mangaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMangaServiceClient(cc grpc.ClientConnInterface) MangaServiceClient {
	return &mangaServiceClient{cc}
}

func (c *mangaServiceClient) AddManga(ctx context.Context, in *AddMangaRequest, opts ...grpc.CallOption) (*AddMangaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMangaResponse)
	err := c.cc.Invoke(ctx, MangaService_AddManga_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaServiceClient) EditManga(ctx context.Context, in *EditMangaRequest, opts ...grpc.CallOption) (*EditMangaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditMangaResponse)
	err := c.cc.Invoke(ctx, MangaService_EditManga_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaServiceClient) ListMangas(ctx context.Context, in *ListMangasRequest, opts ...grpc.CallOption) (*ListMangasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMangasResponse)
	err := c.cc.Invoke(ctx, MangaService_ListMangas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaServiceClient) CheckMangaAvailability(ctx context.Context, in *CheckMangaAvailabilityRequest, opts ...grpc.CallOption) (*CheckMangaAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckMangaAvailabilityResponse)
	err := c.cc.Invoke(ctx, MangaService_CheckMangaAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MangaServiceServer is the server API for MangaService service.
// All implementations must embed UnimplementedMangaServiceServer
// for forward compatibility.
type MangaServiceServer interface {
	AddManga(context.Context, *AddMangaRequest) (*AddMangaResponse, error)
	EditManga(context.Context, *EditMangaRequest) (*EditMangaResponse, error)
	ListMangas(context.Context, *ListMangasRequest) (*ListMangasResponse, error)
	CheckMangaAvailability(context.Context, *CheckMangaAvailabilityRequest) (*CheckMangaAvailabilityResponse, error)
	mustEmbedUnimplementedMangaServiceServer()
}

// UnimplementedMangaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMangaServiceServer struct{}

func (UnimplementedMangaServiceServer) AddManga(context.Context, *AddMangaRequest) (*AddMangaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddManga not implemented")
}
func (UnimplementedMangaServiceServer) EditManga(context.Context, *EditMangaRequest) (*EditMangaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditManga not implemented")
}
func (UnimplementedMangaServiceServer) ListMangas(context.Context, *ListMangasRequest) (*ListMangasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMangas not implemented")
}
func (UnimplementedMangaServiceServer) CheckMangaAvailability(context.Context, *CheckMangaAvailabilityRequest) (*CheckMangaAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMangaAvailability not implemented")
}
func (UnimplementedMangaServiceServer) mustEmbedUnimplementedMangaServiceServer() {}
func (UnimplementedMangaServiceServer) testEmbeddedByValue()                      {}

// UnsafeMangaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MangaServiceServer will
// result in compilation errors.
type UnsafeMangaServiceServer interface {
	mustEmbedUnimplementedMangaServiceServer()
}

func RegisterMangaServiceServer(s grpc.ServiceRegistrar, srv MangaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMangaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MangaService_ServiceDesc, srv)
}

func _MangaService_AddManga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMangaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServiceServer).AddManga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MangaService_AddManga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServiceServer).AddManga(ctx, req.(*AddMangaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MangaService_EditManga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMangaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServiceServer).EditManga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MangaService_EditManga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServiceServer).EditManga(ctx, req.(*EditMangaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MangaService_ListMangas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMangasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServiceServer).ListMangas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MangaService_ListMangas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServiceServer).ListMangas(ctx, req.(*ListMangasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MangaService_CheckMangaAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMangaAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServiceServer).CheckMangaAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MangaService_CheckMangaAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServiceServer).CheckMangaAvailability(ctx, req.(*CheckMangaAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MangaService_ServiceDesc is the grpc.ServiceDesc for MangaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MangaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MangaService",
	HandlerType: (*MangaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddManga",
			Handler:    _MangaService_AddManga_Handler,
		},
		{
			MethodName: "EditManga",
			Handler:    _MangaService_EditManga_Handler,
		},
		{
			MethodName: "ListMangas",
			Handler:    _MangaService_ListMangas_Handler,
		},
		{
			MethodName: "CheckMangaAvailability",
			Handler:    _MangaService_CheckMangaAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/manga_service.proto",
}
